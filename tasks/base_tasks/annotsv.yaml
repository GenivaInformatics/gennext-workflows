apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: annotsv-template
  namespace: argo
spec:
  entrypoint: annotsv
  templates:
    - name: annotsv
      inputs:
        parameters:
          - name: input-vcf-f
          - name: annotsv-ref-dir
          - name: sv-min-size
            value: "20"
          - name: ref-version
            value: "hg38"
          - name: output-annotsv-tsv-f
      outputs:
        parameters:
          - name: output-annotsv-tsv-f
            value: "{{inputs.parameters.output-annotsv-tsv-f}}"
      volumes:
        - name: input-vcf-f
          hostPath:
            path: "{{inputs.parameters.input-vcf-f}}"
            type: File
        - name: output-annotsv-tsv-f
          hostPath:
            path: "{{=sprig.osDir(inputs.parameters['output-annotsv-tsv-f'])}}"
            type: DirectoryOrCreate
        - name: annotsv-ref-dir
          hostPath:
            path: "{{inputs.parameters.annotsv-ref-dir}}"
            type: Directory
      script:
        name: "annotsv"
        image: quay.io/biocontainers/annotsv:3.3.9--py312hdfd78af_0
        command: [sh]
        source: |
          ref_version="{{inputs.parameters.ref-version}}"
          if [ "$ref_version" = "hg38" ]; then
              grch_ref_version="GRCh38"
          elif [ "$ref_version" = "hg19" ]; then
              grch_ref_version="GRCh37"
          else
              grch_ref_version=$ref_version
          fi;

          # extract input vcf if compressed
          if [[ "/mnt/input/vcf/{{=sprig.osBase(inputs.parameters['input-vcf-f'])}}" == *.gz ]]; then
            zcat "/mnt/input/vcf/{{=sprig.osBase(inputs.parameters['input-vcf-f'])}}" > "/tmp/input-vcf.vcf";
          else
            cp "/mnt/input/vcf/{{=sprig.osBase(inputs.parameters['input-vcf-f'])}}" "/tmp/input-vcf.vcf";
          fi;

          head -n5 /tmp/input-vcf.vcf;

          AnnotSV \
          -genomeBuild $grch_ref_version \
          -annotationsDir "/mnt/ref/" \
          -SVminSize {{inputs.parameters.sv-min-size}} \
          -SVinputFile "/tmp/input-vcf.vcf" \
          -outputFile "/output/tsv/{{=sprig.osBase(inputs.parameters['output-annotsv-tsv-f'])}}";

        volumeMounts:
          - name: input-vcf-f
            mountPath: "/mnt/input/vcf/{{=sprig.osBase(inputs.parameters['input-vcf-f'])}}"
          - name: output-annotsv-tsv-f
            mountPath: "/output/tsv/"
          - name: annotsv-ref-dir
            mountPath: "/mnt/ref/"
    - name: annotsv-create-dummy-tsv
      inputs:
        parameters:
          - name: dummy-annotsv-tsv-f
          - name: sample-id
      outputs:
        parameters:
          - name: dummy-annotsv-tsv-f
            value: "{{inputs.parameters.dummy-annotsv-tsv-f}}"
      volumes:
        - name: dummy-annotsv-tsv-f
          hostPath:
            path: "{{=sprig.osDir(inputs.parameters['dummy-annotsv-tsv-f'])}}"
            type: DirectoryOrCreate
      script:
        name: "annotsv"
        image: python:alpine
        command: [python]
        source: |
          from pathlib import Path

          sample_id = "{{inputs.parameters.sample-id}}"
          dummy_annotsv_tsv_path = "/mnt/output/tsv/{{=sprig.osBase(inputs.parameters['dummy-annotsv-tsv-f'])}}"

          dummy_annotsv_tsv_f = Path(dummy_annotsv_tsv_path)
          annotsv_columns = [
              'AnnotSV_ID', 'SV_chrom', 'SV_start', 'SV_end', 'SV_length', 'SV_type', 'Samples_ID', 'ID',
              'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'FORMAT', sample_id, 'Annotation_mode', 'CytoBand',
              'Gene_name', 'Gene_count', 'Tx', 'Tx_start', 'Tx_end', 'Overlapped_tx_length', 'Overlapped_CDS_length',
              'Overlapped_CDS_percent', 'Frameshift', 'Exon_count', 'Location', 'Location2', 'Dist_nearest_SS',
              'Nearest_SS_type', 'Intersect_start', 'Intersect_end', 'RE_gene', 'P_gain_phen', 'P_gain_hpo',
              'P_gain_source', 'P_gain_coord', 'P_loss_phen', 'P_loss_hpo', 'P_loss_source', 'P_loss_coord',
              'P_ins_phen', 'P_ins_hpo', 'P_ins_source', 'P_ins_coord', 'po_P_gain_phen', 'po_P_gain_hpo',
              'po_P_gain_source', 'po_P_gain_coord', 'po_P_gain_percent', 'po_P_loss_phen', 'po_P_loss_hpo',
              'po_P_loss_source', 'po_P_loss_coord', 'po_P_loss_percent', 'P_snvindel_nb', 'P_snvindel_phen',
              'B_gain_source', 'B_gain_coord', 'B_gain_AFmax', 'B_loss_source', 'B_loss_coord', 'B_loss_AFmax',
              'B_ins_source', 'B_ins_coord', 'B_ins_AFmax', 'B_inv_source', 'B_inv_coord', 'B_inv_AFmax',
              'po_B_gain_allG_source', 'po_B_gain_allG_coord', 'po_B_gain_someG_source', 'po_B_gain_someG_coord',
              'po_B_loss_allG_source', 'po_B_loss_allG_coord', 'po_B_loss_someG_source', 'po_B_loss_someG_coord',
              'TAD_coordinate', 'ENCODE_experiment', 'GC_content_left', 'GC_content_right', 'Repeat_coord_left',
              'Repeat_type_left', 'Repeat_coord_right', 'Repeat_type_right', 'Gap_left', 'Gap_right', 'SegDup_left',
              'SegDup_right', 'ENCODE_blacklist_left', 'ENCODE_blacklist_characteristics_left', 'ENCODE_blacklist_right',
              'ENCODE_blacklist_characteristics_right', 'ACMG', 'HI', 'TS', 'DDD_HI_percent', 'DDD_status', 'DDD_mode',
              'DDD_consequence', 'DDD_disease', 'DDD_pmid', 'ExAC_delZ', 'ExAC_dupZ', 'ExAC_cnvZ', 'ExAC_synZ', 'ExAC_misZ',
              'GenCC_disease', 'GenCC_moi', 'GenCC_classification', 'GenCC_pmid', 'OMIM_ID', 'OMIM_phenotype',
              'OMIM_inheritance', 'OMIM_morbid', 'OMIM_morbid_candidate', 'LOEUF_bin', 'GnomAD_pLI', 'ExAC_pLI',
              'AnnotSV_ranking_score', 'AnnotSV_ranking_criteria', 'ACMG_class'
          ]

          if not dummy_annotsv_tsv_f.is_file():
              with dummy_annotsv_tsv_f.open("w") as f:
                  f.write("\t".join(annotsv_columns) + "\n")
        volumeMounts:
          - name: dummy-annotsv-tsv-f
            mountPath: "/mnt/output/tsv/"
