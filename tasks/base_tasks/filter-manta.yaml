apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: filter-manta-template
  namespace: argo
spec:
  templates:
    - name: filter-manta
      inputs:
        parameters:
          - name: manta-
          - name: sv-cnv-regions-bed-f
          - name: sv-cnv-geneslist-f
          - name: sv-translocations-bed-f
          - name: sv-translocations-geneslist-f
          - name: indelible-filtered-out-tsv
          - name: indelible-oncokb-out-tsv
      outputs:
        parameters:
          - name: indelible-filtered-out-tsv
            value: "{{inputs.parameters.indelible-filtered-out-tsv}}"
          - name: indelible-oncokb-out-tsv
            value: "{{inputs.parameters.indelible-oncokb-out-tsv}}"
      volumes:
        - name: indelible-tsv
          hostPath:
            path: "{{inputs.parameters.indelible-tsv}}"
            type: File
        - name: sv-cnv-regions-bed-f
          hostPath:
            path: "{{inputs.parameters.sv-cnv-regions-bed-f}}"
            type: File
        - name: sv-cnv-geneslist-f
          hostPath:
            path: "{{inputs.parameters.sv-cnv-geneslist-f}}"
            type: File
        - name: sv-translocations-bed-f
          hostPath:
            path: "{{inputs.parameters.sv-translocations-bed-f}}"
            type: File
        - name: sv-translocations-geneslist-f
          hostPath:
            path: "{{inputs.parameters.sv-translocations-geneslist-f}}"
            type: File
        - name: indelible-filtered-out-tsv
          hostPath:
            path: "{{=sprig.osDir(inputs.parameters['indelible-filtered-out-tsv'])}}"
            type: DirectoryOrCreate
        - name: indelible-oncokb-out-tsv
          hostPath:
            path: "{{=sprig.osDir(inputs.parameters['indelible-oncokb-out-tsv'])}}"
            type: DirectoryOrCreate
      script:
        name: filter-indelible-script
        image: quay.io/biocontainers/pyranges:0.0.129--pyh7cba7a3_0
        workingDir: /mnt/input/
        command: [python]
        source: |
          import pandas as pd
          import pyranges as pr

          tsv_file = "/mnt/input/indelible/{{=sprig.osBase(inputs.parameters['indelible-tsv'])}}"
          tsv_filtered_file = "/mnt/output/filtered/{{=sprig.osBase(inputs.parameters['indelible-filtered-out-tsv'])}}"
          tsv_oncokb_file = "/mnt/output/oncokb/{{=sprig.osBase(inputs.parameters['indelible-oncokb-out-tsv'])}}"

          sv_cnv_ranges = pr.read_bed("/mnt/input/bed/cnv/{{=sprig.osBase(inputs.parameters['sv-cnv-regions-bed-f'])}}")
          sv_translocation_ranges = pr.read_bed("/mnt/input/bed/translocations/{{=sprig.osBase(inputs.parameters['sv-translocations-bed-f'])}}")
          sv_cnv_genes_list_txt = "/mnt/input/geneslist/cnv/{{=sprig.osBase(inputs.parameters['sv-cnv-geneslist-f'])}}"
          sv_translocation_genes_list_txt = "/mnt/input/geneslist/translocations/{{=sprig.osBase(inputs.parameters['sv-translocations-geneslist-f'])}}"

          indelible_to_oncokb_mapping = {
              'DUP': 'DUPLICATION',      # Duplication
              'DEL': 'DELETION',         # Deletion
              'INS': 'INSERTION',        # Insertion
              'CMPLX': 'UNKNOWN',        # Complex (no direct equivalent in OncoKB)
              'TRANSSEGDUP': 'UNKNOWN',  # Segmental duplication or translocation (unclear mapping to OncoKB)
              'SEGDUP_TRANS': 'UNKNOWN'  # Segmental duplication or translocation (unclear mapping to OncoKB)
          }

          def line_intersects_bed(line, bed_ranges):
            query_range = pr.PyRanges(chromosomes=[line[0]], starts=[line[1]], ends=[line[2]])
            return bed_ranges.intersect(query_range).df.shape[0] > 0

          # filter by REALN and bed regions intersection
          with open(tsv_file, 'r') as tsvfile:
            with open(tsv_filtered_file, 'w') as filtered_tsvfile:
                header = tsvfile.readline().strip().split("\t")
                filtered_tsvfile.write("\t".join(header) + "\n")
                chrom_idx = header.index('chrom')
                start_idx = header.index('position')
                otherside_idx = header.index('otherside')
                mode_idx = header.index('mode')
                while line := tsvfile.readline():
                    line = line.strip().split("\t")
                    if not line[mode_idx].startswith("REALN"):
                        continue
                    chrom = line[chrom_idx]
                    start = int(line[start_idx])
                    end = int(line[otherside_idx].split(':')[1])
                    if line_intersects_bed([chrom, start, end], sv_cnv_ranges) or line_intersects_bed([chrom, start, end], sv_translocation_ranges):
                        filtered_tsvfile.write("\t".join(line) + "\n")

          # load genes lists
          with open(sv_cnv_genes_list_txt, 'r') as sv_cnv_genes_list_f:
              sv_cnv_genes_list = set(map(lambda x: x.strip(),sv_cnv_genes_list_f.readlines()))
          with open(sv_translocation_genes_list_txt, 'r') as sv_translocation_genes_list_f:
              sv_translocation_genes_list = set(map(lambda x: x.strip(),sv_translocation_genes_list_f.readlines()))
          sv_genes_list = sv_cnv_genes_list.union(sv_translocation_genes_list)

          # select columns for oncokb annotation, filter by genes lists
          with open(tsv_filtered_file, 'r') as filtered_tsvfile:
              with open(tsv_oncokb_file, 'w') as oncokb_tsvfile:
                  header = filtered_tsvfile.readline().strip().split("\t")
                  chrom_idx = header.index('chrom')
                  start_idx = header.index('position')
                  otherside_idx = header.index('otherside')
                  ddg2p_idx = header.index('ddg2p')
                  hgnc_idx = header.index('hgnc')
                  hgnc_constrained_idx = header.index('hgnc_constrained')
                  svtype_idx = header.index('svtype')
                  out_header_cols = ['chrom', 'position', 'otherside', 'GeneA', 'GeneB', 'Sv_Type']
                  oncokb_tsvfile.write("\t".join(out_header_cols) + "\n")
                  while line := filtered_tsvfile.readline():
                      values = line.strip().split('\t')
                      genes = set(values[ddg2p_idx].split(';') + values[hgnc_idx].split(';') + values[hgnc_constrained_idx].split(';'))
                      for gene in genes.intersection(sv_genes_list):
                          oncokb_tsvfile.write("\t".join([values[chrom_idx], values[start_idx], values[otherside_idx], gene, gene, indelible_to_oncokb_mapping.get(values[svtype_idx], "UNKNOWN")]) + "\n")

        volumeMounts:
          - name: indelible-tsv
            mountPath: "/mnt/input/indelible/{{=sprig.osBase(inputs.parameters['indelible-tsv'])}}"
          - name: sv-cnv-regions-bed-f
            mountPath: "/mnt/input/bed/cnv/{{=sprig.osBase(inputs.parameters['sv-cnv-regions-bed-f'])}}"
          - name: sv-cnv-geneslist-f
            mountPath: "/mnt/input/geneslist/cnv/{{=sprig.osBase(inputs.parameters['sv-cnv-geneslist-f'])}}"
          - name: sv-translocations-bed-f
            mountPath: "/mnt/input/bed/translocations/{{=sprig.osBase(inputs.parameters['sv-translocations-bed-f'])}}"
          - name: sv-translocations-geneslist-f
            mountPath: "/mnt/input/geneslist/translocations/{{=sprig.osBase(inputs.parameters['sv-translocations-geneslist-f'])}}"
          - name: indelible-filtered-out-tsv
            mountPath: "/mnt/output/filtered/"
          - name: indelible-oncokb-out-tsv
            mountPath: "/mnt/output/oncokb/"
