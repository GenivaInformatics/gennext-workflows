apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: gennext-prs-template
spec:
  templates:
    - name: gennext-prs
      # nodeSelector:
      #   kubernetes.io/hostname: "{{inputs.parameters.node-name}}"
      inputs:
        parameters:
          - name: input-genotype-file
          - name: ref-pgs-folder
          - name: ref-pgs-metadata
          - name: thread-count
          - name: output-json-folder
          - name: output-dbs-folder
      outputs:
        parameters:
          - name: output-dbs-folder
            value: "{{inputs.parameters.output-dbs-folder}}"
          - name: output-json-folder
            value: "{{inputs.parameters.output-json-folder}}"
      volumes:
        - name: input-genotype-file
          hostPath:
            path: "{{inputs.parameters.input-genotype-file}}"
            type: File
        - name: ref-pgs-folder
          hostPath:
            path: "{{inputs.parameters.ref-pgs-folder}}"
            type: Directory
        - name: ref-pgs-metadata
          hostPath:
            path: "{{inputs.parameters.ref-pgs-metadata}}"
            type: File
        - name: output-dbs-folder
          hostPath:
            path: "{{inputs.parameters.output-dbs-folder}}"
            type: DirectoryOrCreate
        - name: output-json-folder
          hostPath:
            path: "{{inputs.parameters.output-json-folder}}"
            type: DirectoryOrCreate
      script:
        name: "gennext-prs-script"
        image: bergun/gennext-prs:v0.0.1
        command: [sh]
        source: |
          PRODUCT_ID=$(basename "{{=sprig.osBase(inputs.parameters['input-genotype-file'])}}" .tsv);
          mkdir -p /mnt/output/dbs/$(basename "{{=sprig.osBase(inputs.parameters['input-genotype-file'])}}" .tsv)/ &&
          ./gennext-prs \
          --genotype-file /mnt/input/{{=sprig.osBase(inputs.parameters['input-genotype-file'])}} \
          --metadata /mnt/ref/meta/{{=sprig.osBase(inputs.parameters['ref-pgs-metadata'])}} \
          --pgs-folder /mnt/ref/pgs/ \
          --output /mnt/output/json/ \
          --dbs /mnt/output/dbs/ \
          --threads {{inputs.parameters.thread-count}};

          echo "Cleaning PRS data...";

          DB_FOLDER="/mnt/output/dbs/$PRODUCT_ID/";
          find "$DB_FOLDER" -type f | grep "\.sqlite$" > /tmp/sqlite_files.txt

          while read db_file; do
            echo "Querying $db_file:"

            # Run the query and check if the result is empty
            result=$(sqlite3 "$db_file" "SELECT prs FROM results;")

            if [ -z "$result" ]; then
              echo "No data found. Removing $db_file."
              sudo rm "$db_file"
            else
              echo "Result: $result"
            fi
          done < /tmp/sqlite_files.txt

          mv $DB_FOLDER/* $DB_FOLDER/../
        volumeMounts:
          - name: input-genotype-file
            mountPath: "/mnt/input/{{=sprig.osBase(inputs.parameters['input-genotype-file'])}}"
          - name: ref-pgs-folder
            mountPath: "/mnt/ref/pgs/"
          - name: ref-pgs-metadata
            mountPath: "/mnt/ref/meta/{{=sprig.osBase(inputs.parameters['ref-pgs-metadata'])}}"
          - name: output-dbs-folder
            mountPath: "/mnt/output/dbs/"
          - name: output-json-folder
            mountPath: "/mnt/output/json/"
