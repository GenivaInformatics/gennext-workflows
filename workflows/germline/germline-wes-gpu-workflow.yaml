apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: germline-wes-gpu-workflow
spec:
  entrypoint: main
  templates:
    - name: germline-wes-gpu-fastq
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: modules-base-dir
          - name: annots-base-dir
          - name: thread-count
            default: "8"
      outputs:
        parameters:
          - name: bam-output
            valueFrom:
              parameter: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
          # - name: vcf-hc-output
          #   valueFrom:
          #     parameter: "{{tasks.haplotypecaller.outputs.parameters.output-vcf}}"
          - name: vcf-dv-output
            valueFrom:
              parameter: "{{tasks.deepvariant.outputs.parameters.output-vcf}}"
      dag:
        tasks:
          - name: get-abs-ref-dirs
            templateRef:
              name: get-abs-ref-dirs
              template: get-abs-ref-dirs
            arguments:
              parameters:
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: ref-ver
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
          - name: check-file-path
            templateRef:
              name: check-file-path
              template: check-file-path
            arguments:
              parameters:
                - name: input-file-1
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR1.name')}}"
                - name: input-file-2
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR2.name')}}"
                - name: input-file-3
                  # value: "."
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.regionsFile.name')}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
          - name: copy-fastq-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-fastq-to-scratch
            arguments:
              parameters:
                - name: fq-r1
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR1.name')}}"
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-1}}"
                - name: fq-r2
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR2.name')}}"
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-2}}"
                - name: input-rel-dir
                  # value: "{{inputs.parameters.input-rel-dir}}"
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-1}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}/reads/"
            depends: "check-file-path"
          - name: copy-regions-file-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-regions-file-to-scratch-v3
            arguments:
              parameters:
                - name: provided-regions-file
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-3}}"
                - name: enrichment-kit-regions-file
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.enrichmentKit.filename')}}"
                - name: default-regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                - name: input-rel-dir
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-3}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: ref-regions-dir
                  value: "{{inputs.parameters.ref-base-dir}}/{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/regions/"
            depends: "copy-fastq-to-scratch && get-abs-ref-dirs"
                  # - name: run-data
                  #   value: "{{inputs.parameters.run-data}}"
                  # - name: input-rel-dir
                  #   value: "{{inputs.parameters.input-rel-dir}}"
                  # - name: scratch-rel-dir
                  #   value: "{{inputs.parameters.scratch-rel-dir}}"
          - name: trim-galore
            templateRef:
              name: trim-galore-template
              template: trim-galore
            arguments:
              parameters:
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}trimmed_reads/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "copy-fastq-to-scratch"
          - name: fastqc
            templateRef:
              name: fastqc-template
              template: fastqc
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/fastqc/pre-trim/"
            depends: "copy-fastq-to-scratch"
          - name: compose-read-group-str
            templateRef:
              name: compose-read-group-str
              template: compose-read-group-str-from-fq
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
            depends: "copy-fastq-to-scratch"
          - name: pb-fq2bam
            templateRef:
              name: parabricks-fq2bam-template
              template: parabricks-fq2bamfast-no-bqsr
            arguments:
              parameters:
                - name: input-fq-r1
                  value: "{{tasks.trim-galore.outputs.parameters.fq-r1}}"
                - name: input-fq-r2
                  value: "{{tasks.trim-galore.outputs.parameters.fq-r2}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: read-group-str
                  value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
                - name: output-bam
                  value: "{{inputs.parameters.scratch-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.bam"
                - name: output-dupes
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.dupes"
            depends: "trim-galore && compose-read-group-str && get-abs-ref-dirs"
          - name: pb-bqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-bqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: known-sites
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-bed-f}}"
                - name: output-recal-file
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
            depends: "pb-fq2bam && get-abs-ref-dirs && copy-regions-file-to-scratch"
          - name: pb-applybqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-applybqsr
            arguments:
              parameters:
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: input-recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                - name: output-bam
                  value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
            depends: "pb-bqsr && get-abs-ref-dirs"
          - name: deepvariant
            templateRef:
              name: deepvariant-template
              template: deepvariant-wes-gpu
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: genome-ref-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-bed-f}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_dv.vcf.gz"
                - name: output-g-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_dv.g.vcf.gz"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            depends: "pb-applybqsr && get-abs-ref-dirs && copy-regions-file-to-scratch"
          - name: filter-vcf
            templateRef:
              name: bcftools-template
              template: bcftools-filter-vcf
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.deepvariant.outputs.parameters.output-vcf}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_filtered_dv.vcf.gz"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-bed-f}}"
            depends: "deepvariant && get-abs-ref-dirs && copy-regions-file-to-scratch"
          # - name: manta
          #   templateRef:
          #     name: manta-template
          #     template: manta
          #   arguments:
          #     parameters:
          #       - name: sample-id
          #         value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
          #       - name: normal-bam
          #         value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
          #       - name: ref-genome-f
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
          #       - name: regions-file
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
          #       - name: output-dir
          #         value: "{{inputs.parameters.temp-rel-dir}}vcf/"
          #       - name: scratch-dir
          #         value: "{{inputs.parameters.scratch-rel-dir}}manta/"
          #       - name: thread-count
          #         value: "{{inputs.parameters.thread-count}}"
          - name: exomedepth
            templateRef:
              name: exomedepth-template
              template: exomedepth
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: ref-regions
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/regions/gencode.v47.hg38.exons.bed"
                - name: ref-cohort
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/exomedepth/cohorts/gencode_v47_hg38_exons_cohort.rds"
                - name: ref-fasta
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_exomedepth_CNV.vcf.gz"
            depends: "get-abs-ref-dirs && pb-applybqsr"
          - name: annotsv
            templateRef:
              name: annotsv-template
              template: annotsv
            arguments:
              parameters:
                - name: input-vcf-f
                  # value: "{{tasks.manta.outputs.parameters.output-diploid-vcf-f}}"
                  value: "{{tasks.exomedepth.outputs.parameters.output-vcf}}"
                - name: output-annotsv-tsv-f
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_annotsv.tsv"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: annotsv-ref-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/AnnotSV/"
                - name: sv-min-size
                  value: "50"
            # depends: "manta"
            depends: "exomedepth"
          - name: annotsv-create-dummy-tsv
            templateRef:
              name: annotsv-template
              template: annotsv-create-dummy-tsv
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: dummy-annotsv-tsv-f
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
            depends: "annotsv"
          - name: verifybamid
            templateRef:
              name: verifybamid-template
              template: verifybamid-genome-wrapper
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/verifybamid/"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: verifybamid-ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/verifybamid/"
            depends: "pb-applybqsr"
          - name: mosdepth
            templateRef:
              name: mosdepth-template
              template: mosdepth-exome
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: regions-bed-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.exome-regions-bed-f}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/mosdepth/"
            depends: "pb-applybqsr && get-abs-ref-dirs && verifybamid"
          - name: multiqc
            templateRef:
              name: multiqc-template
              template: main
            arguments:
              parameters:
                - name: input-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "verifybamid && pb-applybqsr && mosdepth"
          - name: collect-qc-data
            templateRef:
              name: collect-qc-data-templates
              template: collect-qc-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: sample-fqs-fnames
                  value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                - name: metrics-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "multiqc && mosdepth && verifybamid"
          - name: copy-temp-to-output
            templateRef:
              name: copy-temp-to-output
              template: copy-temp-to-output
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
            depends: "collect-qc-data && filter-vcf && annotsv-create-dummy-tsv"
          - name: cravat
            templateRef:
              name: cravat-templates
              template: cravat-solo-template
            arguments:
              parameters:
                - name: proband-vcf
                  value: "{{tasks.copy-temp-to-output.outputs.parameters.output-vcf-filtered-dv}}"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: annotators
                  value: "intervar cadd omim turkish_variome clinvar clinvar_acmg gme clinpred alphamissense gnomad4"
                - name: modules-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: output-dir # TODO: retrieve base cravat jobs directory
                  value: "{{inputs.parameters.annots-base-dir}}/{{inputs.parameters.user-id}}/S_{{inputs.parameters.run-id}}"
            depends: "copy-temp-to-output"
          - name: clean-scratch
            templateRef:
              name: dir-clean-up
              template: dir-clean-up
            arguments:
              parameters:
                - name: directory
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            depends: "copy-temp-to-output"
    - name: germline-wes-gpu-bam
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: modules-base-dir
          - name: annots-base-dir
          - name: thread-count
            default: "8"
      outputs:
        parameters:
          - name: bam-output
            valueFrom:
              parameter: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
          # - name: vcf-hc-output
          #   valueFrom:
          #     parameter: "{{tasks.haplotypecaller.outputs.parameters.output-vcf}}"
          - name: vcf-dv-output
            valueFrom:
              parameter: "{{tasks.deepvariant.outputs.parameters.output-vcf}}"
      dag:
        tasks:
          - name: get-abs-ref-dirs
            templateRef:
              name: get-abs-ref-dirs
              template: get-abs-ref-dirs
            arguments:
              parameters:
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: ref-ver
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                  value: "hg38"
          - name: copy-bam-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-bam-to-scratch
            arguments:
              parameters:
                - name: bam
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.bam.name')}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
          - name: pb-bam2fq
            templateRef:
              name: parabricks-bam2fq-template
              template: parabricks-bam2fq
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.copy-bam-to-scratch.outputs.parameters.bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}reads/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "copy-bam-to-scratch"
          - name: fastqc
            templateRef:
              name: fastqc-template
              template: fastqc
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/fastqc/"
            depends: "pb-bam2fq"
          - name: compose-read-group-str
            templateRef:
              name: compose-read-group-str
              template: compose-read-group-str-from-fq
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
            depends: "pb-bam2fq"
          - name: pb-fq2bam
            templateRef:
              name: parabricks-fq2bam-template
              template: parabricks-fq2bamfast-no-bqsr
            arguments:
              parameters:
                - name: input-fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: input-fq-r2
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r2}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: read-group-str
                  value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
                - name: output-bam
                  value: "{{inputs.parameters.scratch-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.bam"
                - name: output-dupes
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.dupes"
            depends: "pb-bam2fq && compose-read-group-str && get-abs-ref-dirs"
          - name: pb-bqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-bqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: known-sites
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
                - name: regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                - name: output-recal-file
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
            depends: "pb-fq2bam && get-abs-ref-dirs"
          - name: pb-applybqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-applybqsr
            arguments:
              parameters:
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: input-recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                - name: output-bam
                  value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
            depends: "pb-bqsr && get-abs-ref-dirs"
          - name: deepvariant
            templateRef:
              name: deepvariant-template
              template: deepvariant-wes-gpu
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: genome-ref-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_dv.vcf.gz"
                - name: output-g-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_dv.g.vcf.gz"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            depends: "pb-applybqsr && get-abs-ref-dirs"
          - name: filter-vcf
            templateRef:
              name: bcftools-template
              template: bcftools-filter-vcf
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.deepvariant.outputs.parameters.output-vcf}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_filtered_dv.vcf.gz"
                - name: regions-file
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
            depends: "deepvariant && get-abs-ref-dirs"
          # - name: manta
          #   templateRef:
          #     name: manta-template
          #     template: manta
          #   arguments:
          #     parameters:
          #       - name: sample-id
          #         value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
          #       - name: normal-bam
          #         value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
          #       - name: ref-genome-f
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
          #       - name: regions-file
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.regions-bed-f}}"
          #       - name: output-dir
          #         value: "{{inputs.parameters.temp-rel-dir}}vcf/"
          #       - name: scratch-dir
          #         value: "{{inputs.parameters.scratch-rel-dir}}manta/"
          #       - name: thread-count
          #         value: "{{inputs.parameters.thread-count}}"
          #   depends: "deepvariant && get-abs-ref-dirs && pb-applybqsr"
          - name: exomedepth
            templateRef:
              name: exomedepth-template
              template: exomedepth
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: ref-regions
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/regions/gencode.v47.hg38.exons.bed"
                - name: ref-cohort
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/exomedepth/cohorts/gencode_v47_hg38_exons_cohort.rds"
                - name: ref-fasta
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_exomedepth_CNV.vcf.gz"
            depends: "get-abs-ref-dirs && pb-applybqsr"
          - name: annotsv
            templateRef:
              name: annotsv-template
              template: annotsv
            arguments:
              parameters:
                - name: input-vcf-f
                  # value: "{{tasks.manta.outputs.parameters.output-diploid-vcf-f}}"
                  value: "{{tasks.exomedepth.outputs.parameters.output-vcf}}"
                - name: output-annotsv-tsv-f
                  value: "{{inputs.parameters.temp-rel-dir}}vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_annotsv.tsv"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: annotsv-ref-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/AnnotSV/"
                - name: sv-min-size
                  value: "50"
            # depends: "manta"
            depends: "exomedepth"
          - name: annotsv-create-dummy-tsv
            templateRef:
              name: annotsv-template
              template: annotsv-create-dummy-tsv
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: dummy-annotsv-tsv-f
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
            depends: "annotsv"
          - name: verifybamid
            templateRef:
              name: verifybamid-template
              template: verifybamid-genome-wrapper
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/verifybamid/"
                - name: ref-version
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                  value: "hg38"
                - name: verifybamid-ref-base-dir
                  # value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/verifybamid/"
                  value: "{{inputs.parameters.ref-base-dir}}hg38/other/verifybamid/"
            depends: "pb-applybqsr"
          - name: mosdepth
            templateRef:
              name: mosdepth-template
              template: mosdepth-exome
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: regions-bed-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.exome-regions-bed-f}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/mosdepth/"
            depends: "pb-applybqsr && get-abs-ref-dirs && verifybamid"
          - name: multiqc
            templateRef:
              name: multiqc-template
              template: main
            arguments:
              parameters:
                - name: input-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "verifybamid && pb-applybqsr && mosdepth"
          - name: collect-qc-data
            templateRef:
              name: collect-qc-data-templates
              template: collect-qc-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: sample-fqs-fnames
                  # value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                  value: '["{{=sprig.osBase(tasks[''pb-bam2fq''].outputs.parameters[''output-fq-r1''])}}", "{{=sprig.osBase(tasks[''pb-bam2fq''].outputs.parameters[''output-fq-r2''])}}"]'
                - name: metrics-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "multiqc && mosdepth && verifybamid"
          - name: copy-temp-to-output
            templateRef:
              name: copy-temp-to-output
              template: copy-temp-to-output
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
            depends: "collect-qc-data && filter-vcf && annotsv-create-dummy-tsv"
          - name: cravat
            templateRef:
              name: cravat-templates
              template: cravat-solo-template
            arguments:
              parameters:
                - name: proband-vcf
                  value: "{{tasks.copy-temp-to-output.outputs.parameters.output-vcf-filtered-dv}}"
                - name: ref-version
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                  value: "hg38"
                - name: annotators
                  value: "intervar cadd omim turkish_variome clinvar clinvar_acmg gme clinpred alphamissense gnomad4"
                - name: modules-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: output-dir # TODO: retrieve base cravat jobs directory
                  value: "{{inputs.parameters.annots-base-dir}}/{{inputs.parameters.user-id}}/S_{{inputs.parameters.run-id}}"
            depends: "copy-temp-to-output"
          - name: clean-scratch
            templateRef:
              name: dir-clean-up
              template: dir-clean-up
            arguments:
              parameters:
                - name: directory
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            depends: "copy-temp-to-output"
    - name: germline-wes-vcf
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: modules-base-dir
          - name: annots-base-dir
          - name: thread-count
            default: "8"
      dag:
        tasks:
          - name: copy-vcf-to-output
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-vcf-to-output
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: vcf
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.vcf.name')}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}/vcf/"
          - name: cravat
            templateRef:
              name: cravat-templates
              template: cravat-solo-template
            arguments:
              parameters:
                - name: proband-vcf
                  value: "{{tasks.copy-vcf-to-output.outputs.parameters.vcf}}"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: annotators
                  value: "intervar cadd omim turkish_variome clinvar clinvar_acmg gme clinpred alphamissense gnomad4"
                - name: modules-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: output-dir # TODO: retrieve base cravat jobs directory
                  value: "{{inputs.parameters.annots-base-dir}}/{{inputs.parameters.user-id}}/S_{{inputs.parameters.run-id}}"
            depends: "copy-vcf-to-output"
    - name: main
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: modules-base-dir
          - name: annots-base-dir
          - name: thread-count
            default: "8"
      dag:
        tasks:
          - name: germline-wes-bam-workflow
            when: "{{=jsonpath(inputs.parameters['run-data'], '$.dataType')}} == 'bam'"
            template: germline-wes-gpu-bam
            arguments:
              parameters:
                - name: user-id
                  value: "{{inputs.parameters.user-id}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: run-data
                  value: "{{inputs.parameters.run-data}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: modules-base-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: annots-base-dir
                  value: "{{inputs.parameters.annots-base-dir}}"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
          - name: germline-wes-fastq-workflow
            when: "{{=jsonpath(inputs.parameters['run-data'], '$.dataType')}} == 'fastq'"
            template: germline-wes-gpu-fastq
            arguments:
              parameters:
                - name: user-id
                  value: "{{inputs.parameters.user-id}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: run-data
                  value: "{{inputs.parameters.run-data}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: modules-base-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: annots-base-dir
                  value: "{{inputs.parameters.annots-base-dir}}"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
          - name: germline-wes-vcf-workflow
            when: "{{=jsonpath(inputs.parameters['run-data'], '$.dataType')}} == 'vcf'"
            template: germline-wes-vcf
            arguments:
              parameters:
                - name: user-id
                  value: "{{inputs.parameters.user-id}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: run-data
                  value: "{{inputs.parameters.run-data}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: modules-base-dir
                  value: "{{inputs.parameters.modules-base-dir}}"
                - name: annots-base-dir
                  value: "{{inputs.parameters.annots-base-dir}}"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
