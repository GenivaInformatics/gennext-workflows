apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: somatic-testing-dna-gpu-workflow
spec:
  templates:
    - name: somatic-testing-dna-gpu-bam
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: thread-count
            default: "20"
      # outputs:
      #   parameters:
      #     - name: bam-output
      #       value: "{{tasks.parabricks-somatic-pipeline.outputs.parameters.output-tumor-bam}}"
      dag:
        tasks:
          - name: get-abs-ref-dirs
            templateRef:
              name: get-abs-ref-dirs
              template: get-abs-ref-dirs
            arguments:
              parameters:
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: ref-ver
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
          - name: check-file-path
            templateRef:
              name: check-file-path
              template: check-file-path
            arguments:
              parameters:
                - name: input-file-1
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.bam.name')}}"
                - name: input-file-2
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.regionsFile.name')}}"
                - name: input-file-3
                  value: "."
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
          - name: copy-bam-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-bam-to-scratch
            arguments:
              parameters:
                - name: bam
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-1}}"
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.bam.name')}}"
                - name: input-rel-dir
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-1}}"
                  # value: "{{inputs.parameters.input-rel-dir}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}reads/"
            depends: "check-file-path"
          - name: copy-regions-file-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-regions-file-to-scratch-v2
            arguments:
              parameters:
                - name: provided-regions-file
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-2}}"
                - name: enrichment-kit-regions-file
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.enrichmentKit.filename')}}"
                - name: input-rel-dir
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-2}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: ref-regions-dir
                  value: "{{inputs.parameters.ref-base-dir}}/{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/regions/"
            depends: "check-file-path"
          - name: bgzip-and-index-regions-file
            templateRef:
              name: bcftools-template
              template: bcftools-bed-bgzip-and-index
            arguments:
              parameters:
                - name: input-bed-f
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-bed-gz-f
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}.gz"
            depends: "copy-regions-file-to-scratch"
          - name: pb-bam2fq
            templateRef:
              name: parabricks-bam2fq-template
              template: parabricks-bam2fq
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.copy-bam-to-scratch.outputs.parameters.bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}reads/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "copy-bam-to-scratch"
          - name: fastqc
            templateRef:
              name: fastqc-template
              template: fastqc
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/fastqc/"
            depends: "pb-bam2fq"
          - name: compose-read-group-str
            templateRef:
              name: compose-read-group-str
              template: compose-read-group-str-from-fq
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
            depends: "pb-bam2fq"
          - name: pb-fq2bam
            templateRef:
              name: parabricks-fq2bam-template
              template: parabricks-fq2bam-no-bqsr
            arguments:
              parameters:
                - name: input-fq-r1
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
                - name: input-fq-r2
                  value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r2}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: read-group-str
                  value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
                - name: output-bam
                  value: "{{inputs.parameters.scratch-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.bam"
                - name: output-dupes
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.dupes"
            depends: "pb-bam2fq && compose-read-group-str && get-abs-ref-dirs"
          - name: pb-bqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-bqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: known-sites
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
                - name: output-recal-file
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/bqsr/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
            depends: "pb-fq2bam && get-abs-ref-dirs && copy-regions-file-to-scratch"
          - name: pb-applybqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-applybqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: input-recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: output-bam
                  value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
            depends: "pb-bqsr && get-abs-ref-dirs"
          - name: pb-mutect2
            templateRef:
              name: parabricks-mutect2-template
              template: parabricks-mutect2-tumor-only
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2.vcf"
            depends: "pb-applybqsr && copy-regions-file-to-scratch && get-abs-ref-dirs"
          # - name: parabricks-somatic-pipeline
          #   templateRef:
          #     name: parabricks-somatic-pipeline-template
          #     template: parabricks-somatic-pipeline-tumor-only
          #   arguments:
          #     parameters:
          #       - name: genome-ref
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
          #       - name: input-tumor-fq-r1
          #         value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r1}}"
          #       - name: input-tumor-fq-r2
          #         value: "{{tasks.pb-bam2fq.outputs.parameters.output-fq-r2}}"
          #       - name: regions-file
          #         value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
          #       - name: known-sites
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
          #       - name: scratch-dir
          #         value: "{{inputs.parameters.scratch-rel-dir}}"
          #       - name: read-group-str
          #         value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
          #       - name: output-tumor-bam
          #         value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
          #       - name: output-tumor-vcf
          #         value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2.vcf"
          #       - name: output-tumor-recal
          #         value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
          #       - name: bwa-options
          #         value: "-M"
          #   depends: "pb-bam2fq && get-abs-ref-dirs && copy-regions-file-to-scratch && compose-read-group-str"
          # - name: mutect2-vcf-bgzip-and-index
          #   templateRef:
          #     name: bcftools-template
          #     template: bcftools-bgzip-and-index
          #   arguments:
          #     parameters:
          #       - name: input-vcf-f
          #         value: "{{tasks.parabricks-somatic-pipeline.outputs.parameters.output-tumor-vcf}}"
          #   depends: "parabricks-somatic-pipeline"
          - name: mutect2-filter
            templateRef:
              name: mutect2-template
              template: mutect2-mark-calls
            arguments:
              parameters:
                - name: input-unfiltered-vcf
                  value: "{{tasks.pb-mutect2.outputs.parameters.output-vcf}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-marked-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_marked.vcf.gz"
            depends: "get-abs-ref-dirs && copy-regions-file-to-scratch && pb-mutect2"
          - name: bcftools-filter
            templateRef:
              name: bcftools-template
              template: bcftools-filter-and-bed
            arguments:
              parameters:
                - name: do-filter
                  value: ""
                - name: input-vcf-f
                  value: "{{tasks.mutect2-filter.outputs.parameters.output-marked-vcf}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}/results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_filtered.vcf.gz"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "mutect2-filter && copy-regions-file-to-scratch"
          - name: vlod
            templateRef:
              name: vlod-template
              template: vlod
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: input-vcf
                  value: "{{tasks.bcftools-filter.outputs.parameters.output-vcf-f}}"
                - name: vlod-out-tsv
                  value: "{{inputs.parameters.scratch-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_vlod.tsv.gz"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "bcftools-filter && pb-applybqsr"
          - name: vlod-merge-with-vcf
            templateRef:
              name: vlod-template
              template: vlod-merge-with-vcf
            arguments:
              parameters:
                - name: input-vcf
                  value: "{{tasks.bcftools-filter.outputs.parameters.output-vcf-f}}"
                - name: input-vlod-tsv
                  value: "{{tasks.vlod.outputs.parameters.vlod-out-tsv}}"
                - name: vlod-merged-output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_vlod.vcf" # output returns .gz
            depends: "bcftools-filter && vlod"
          - name: annovar
            templateRef:
              name: annovar-template
              template: annovar
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-vcf-f
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: ref-version
                  value: "hg38"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/"
                - name: annovardb-dir
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.annovar-dir}}"
            depends: "vlod-merge-with-vcf && get-abs-ref-dirs"
          - name: cancervar
            templateRef:
              name: cancervar-template
              template: cancervar
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-vcf-f
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/"
                - name: annovardb-dir
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.annovar-dir}}"
            depends: "annovar && get-abs-ref-dirs"
          - name: annovar-to-maf
            templateRef:
              name: annovar-to-maf-template
              template: annovar-to-maf
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: annovar-out-f
                  value: "{{tasks.annovar.outputs.parameters.annovar-out-f}}"
            depends: "annovar"
          - name: maf-to-db
            templateRef:
              name: maf-to-db-template
              template: maf-to-db
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].id')}}"
                - name: input-maf
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: batch-size
                  value: "1000"
            depends: "annovar-to-maf"
          - name: oncokb-snv
            templateRef:
              name: oncokb-templates
              template: oncokb-snv
            arguments:
              parameters:
                - name: annovar-maf-f
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: annovar-oncokb-maf-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_oncokb.maf"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
            depends: "annovar-to-maf"
          - name: get-otherinfo-columns
            templateRef:
              name: duckdb-template
              template: determine-otherinfo-column
            arguments:
              parameters:
                - name: annovar-oncokb-maf
                  value: "{{tasks.oncokb-snv.outputs.parameters.annovar-oncokb-maf-f}}"
            depends: "oncokb-snv"
          - name: duckdb-snv
            templateRef:
              name: duckdb-template
              template: duckdb-snv
            arguments:
              parameters:
                - name: annovar-oncokb-maf
                  value: "{{tasks.oncokb-snv.outputs.parameters.annovar-oncokb-maf-f}}"
                - name: cancervar-tsv
                  value: "{{tasks.cancervar.outputs.parameters.cancervar-out-f}}"
                - name: vlod-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.vlod-column-name}}"
                - name: filter-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.filter-column-name}}"
                - name: sample-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.sample-column-name}}"
                - name: output-duckdb
                  value: "{{inputs.parameters.temp-rel-dir}}results/db/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_results.duckdb"
            depends: "oncokb-snv && cancervar && get-otherinfo-columns"
          - name: manta
            templateRef:
              name: manta-template
              template: manta
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: tumor-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-sv-merged}}"
                  # value: ""
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.canonical-chroms-regions}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}manta/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "pb-applybqsr && get-abs-ref-dirs && copy-regions-file-to-scratch && bgzip-and-index-regions-file"
          - name: bcftools-filter-and-bed
            templateRef:
              name: bcftools-template
              template: bcftools-filter-and-bed
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.manta.outputs.parameters.output-tumor-vcf-f}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV.vcf.gz"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-sv-merged}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: do-filter
                  value: ""
            depends: "manta && copy-regions-file-to-scratch"
          - name: annotsv
            templateRef:
              name: annotsv-template
              template: annotsv
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.bcftools-filter-and-bed.outputs.parameters.output-vcf-f}}"
                - name: annotsv-ref-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/AnnotSV/"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: sv-min-size
                  value: "20"
                - name: output-annotsv-tsv-f
                  value: "{{inputs.parameters.scratch-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_annot.tsv"
            depends: "bcftools-filter-and-bed"
          - name: annotsv-create-dummy-tsv
            templateRef:
              name: annotsv-template
              template: annotsv-create-dummy-tsv
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: dummy-annotsv-tsv-f
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
            depends: "annotsv"
          - name: annotsv-to-oncokb-format
            templateRef:
              name: filter-annotsv-template
              template: annotsv-to-oncokb-format
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: annotsv-tsv
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
                - name: annotsv-filtered-out-tsv
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_annot_filtered.tsv"
                - name: annotsv-oncokb-out-tsv
                  value: "{{inputs.parameters.scratch-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_oncokb.tsv"
            depends: "annotsv && get-abs-ref-dirs"
          - name: oncokb-sv
            templateRef:
              name: oncokb-templates
              template: oncokb-sv
            arguments:
              parameters:
                - name: oncokb-sv-in-f
                  value: "{{tasks.annotsv-to-oncokb-format.outputs.parameters.annotsv-oncokb-out-tsv}}"
                - name: oncokb-sv-out-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_oncokb_annot.tsv"
            depends: "annotsv-to-oncokb-format"
          - name: duckdb-sv
            templateRef:
              name: duckdb-template
              template: duckdb-sv
            arguments:
              parameters:
                - name: oncokb-tsv-f
                  value: "{{tasks.oncokb-sv.outputs.parameters.oncokb-sv-out-f}}"
                - name: annotsv-tsv-f
                  value: "{{tasks.annotsv-to-oncokb-format.outputs.parameters.annotsv-filtered-out-tsv}}"
                - name: output-duckdb
                  value: "{{inputs.parameters.temp-rel-dir}}results/db/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_results.duckdb"
            depends: "oncokb-sv"
          - name: cnvpytor
            templateRef:
              name: cnvpytor-template
              template: cnvpytor
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: input-vcf
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: output-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/cnv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.cnvpytor"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "pb-applybqsr && vlod-merge-with-vcf && get-abs-ref-dirs"
          - name: verifybamid
            templateRef:
              name: verifybamid-template
              template: verifybamid-exome-wrapper
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/verifybamid/"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: verifybamid-ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/verifybamid/"
            depends: "pb-applybqsr"
          - name: mosdepth
            templateRef:
              name: mosdepth-template
              template: mosdepth-exome
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: thresholds
                  value: "1,5,10,30,50,100,500"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/mosdepth/"
                - name: regions-bed-f
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-snv}}"
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-all-tracks}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "pb-applybqsr && get-abs-ref-dirs && verifybamid && copy-regions-file-to-scratch"
          - name: msisensor-pro
            templateRef:
              name: msisensor-pro-template
              template: msisensor-pro
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/msisensor/"
                - name: tcga-baseline
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.msisensor-pro-baseline}}"
            depends: "pb-applybqsr && get-abs-ref-dirs"
          - name: collect-somatic-data
            # collects TMB and MSI information
            templateRef:
              name: collect-somatic-data-templates
              template: collect-somatic-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: maf-in-f
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: msisensorpro-in-f
                  value: "{{tasks.msisensor-pro.outputs.parameters.output-tsv}}"
                - name: snv-regions-bed-f
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-snv}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "annovar-to-maf && msisensor-pro && copy-regions-file-to-scratch"
          - name: multiqc
            templateRef:
              name: multiqc-template
              template: main
            arguments:
              parameters:
                - name: input-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "verifybamid && pb-applybqsr && mosdepth"
          - name: collect-qc-data
            templateRef:
              name: collect-qc-data-templates
              template: collect-qc-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: sample-fqs-fnames
                  # value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                  # value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                  value: '["{{=sprig.osBase(tasks[''pb-bam2fq''].outputs.parameters[''output-fq-r1''])}}", "{{=sprig.osBase(tasks[''pb-bam2fq''].outputs.parameters[''output-fq-r2''])}}"]'
                - name: metrics-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "multiqc && mosdepth && verifybamid"
          - name: copy-temp-to-output
            templateRef:
              name: copy-temp-to-output
              template: copy-temp-to-output
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
            depends: "collect-qc-data && maf-to-db && collect-somatic-data && duckdb-sv && duckdb-snv && cnvpytor"
          - name: clean-scratch
            templateRef:
              name: dir-clean-up
              template: dir-clean-up
            arguments:
              parameters:
                - name: directory
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            # depends: "copy-temp-to-output"
            depends: "collect-qc-data && duckdb-sv && duckdb-snv && collect-somatic-data && copy-temp-to-output"

    - name: somatic-testing-dna-gpu-fastq
      inputs:
        parameters:
          - name: user-id
          - name: run-id
          - name: run-data
          - name: input-rel-dir
          - name: ref-base-dir
          - name: temp-rel-dir
          - name: scratch-rel-dir
          - name: output-rel-dir
          - name: thread-count
            default: "20"
      # outputs:
      #   parameters:
      #     - name: bam-output
      #       value: "{{tasks.parabricks-somatic-pipeline.outputs.parameters.output-tumor-bam}}"
      dag:
        tasks:
          - name: get-abs-ref-dirs
            templateRef:
              name: get-abs-ref-dirs
              template: get-abs-ref-dirs
            arguments:
              parameters:
                - name: ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}"
                - name: ref-ver
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
          - name: check-file-path
            templateRef:
              name: check-file-path
              template: check-file-path
            arguments:
              parameters:
                - name: input-file-1
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR1.name')}}"
                - name: input-file-2
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR2.name')}}"
                - name: input-file-3
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.regionsFile.name')}}"
                - name: input-rel-dir
                  value: "{{inputs.parameters.input-rel-dir}}"
          - name: copy-fastq-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-fastq-to-scratch
            arguments:
              parameters:
                - name: fq-r1
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR1.name')}}"
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-1}}"
                - name: fq-r2
                  # value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].files.fqR2.name')}}"
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-2}}"
                - name: input-rel-dir
                  # value: "{{inputs.parameters.input-rel-dir}}"
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-1}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}reads/"
            depends: "check-file-path"
          - name: copy-regions-file-to-scratch
            templateRef:
              name: copy-inputs-to-scratch
              template: copy-regions-file-to-scratch-v2
            arguments:
              parameters:
                - name: provided-regions-file
                  value: "{{tasks.check-file-path.outputs.parameters.output-file-3}}"
                - name: enrichment-kit-regions-file
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.enrichmentKit.filename')}}"
                - name: input-rel-dir
                  value: "{{tasks.check-file-path.outputs.parameters.input-rel-dir-3}}"
                - name: scratch-rel-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: ref-regions-dir
                  value: "{{inputs.parameters.ref-base-dir}}/{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/regions/"
            depends: "copy-fastq-to-scratch"
          - name: bgzip-and-index-regions-file
            templateRef:
              name: bcftools-template
              template: bcftools-bed-bgzip-and-index
            arguments:
              parameters:
                - name: input-bed-f
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-bed-gz-f
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}.gz"
            depends: "copy-regions-file-to-scratch"
          - name: trim-galore
            templateRef:
              name: trim-galore-template
              template: trim-galore
            arguments:
              parameters:
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}trimmed_reads/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "copy-fastq-to-scratch"
          - name: fastqc
            templateRef:
              name: fastqc-template
              template: fastqc
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: fq-r2
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r2}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/fastqc/pre-trim/"
            depends: "copy-fastq-to-scratch"
          - name: compose-read-group-str
            templateRef:
              name: compose-read-group-str
              template: compose-read-group-str-from-fq
            arguments:
              parameters:
                - name: fq-r1
                  value: "{{tasks.copy-fastq-to-scratch.outputs.parameters.fq-r1}}"
                - name: sample-name
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
            depends: "copy-fastq-to-scratch"
          # - name: parabricks-somatic-pipeline
          #   templateRef:
          #     name: parabricks-somatic-pipeline-template
          #     template: parabricks-somatic-pipeline-tumor-only
          #   arguments:
          #     parameters:
          #       - name: genome-ref
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
          #       - name: input-tumor-fq-r1
          #         value: "{{tasks.trim-galore.outputs.parameters.fq-r1}}"
          #       - name: input-tumor-fq-r2
          #         value: "{{tasks.trim-galore.outputs.parameters.fq-r2}}"
          #       - name: regions-file
          #         value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
          #       - name: known-sites
          #         value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
          #       - name: scratch-dir
          #         value: "{{inputs.parameters.scratch-rel-dir}}"
          #       - name: read-group-str
          #         value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
          #       - name: output-tumor-bam
          #         value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
          #       - name: output-tumor-vcf
          #         value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2.vcf"
          #       - name: output-tumor-recal
          #         value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
          #       - name: bwa-options
          #         value: "-M"
          #   depends: "trim-galore && get-abs-ref-dirs && copy-regions-file-to-scratch && compose-read-group-str"
          - name: pb-fq2bam
            templateRef:
              name: parabricks-fq2bam-template
              template: parabricks-fq2bam-no-bqsr
            arguments:
              parameters:
                - name: input-fq-r1
                  value: "{{tasks.trim-galore.outputs.parameters.fq-r1}}"
                - name: input-fq-r2
                  value: "{{tasks.trim-galore.outputs.parameters.fq-r2}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}"
                - name: read-group-str
                  value: "{{tasks.compose-read-group-str.outputs.parameters.read-group-str}}"
                - name: output-bam
                  value: "{{inputs.parameters.scratch-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.bam"
                - name: output-dupes
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.dupes"
            depends: "trim-galore && compose-read-group-str && get-abs-ref-dirs"
          - name: pb-bqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-bqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: known-sites
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-dbsnp-f}}"
                - name: output-recal-file
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/bqsr/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.recal"
            depends: "pb-fq2bam && get-abs-ref-dirs && copy-regions-file-to-scratch"
          - name: pb-applybqsr
            templateRef:
              name: parabricks-bqsr-template
              template: parabricks-applybqsr
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-fq2bam.outputs.parameters.output-bam}}"
                - name: input-recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: output-bam
                  value: "{{inputs.parameters.temp-rel-dir}}bam/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_recal.bam"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
            depends: "pb-bqsr && get-abs-ref-dirs"
          - name: pb-mutect2
            templateRef:
              name: parabricks-mutect2-template
              template: parabricks-mutect2-tumor-only
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: genome-ref
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: recal-file
                  value: "{{tasks.pb-bqsr.outputs.parameters.output-recal-file}}"
                - name: output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2.vcf"
            depends: "pb-applybqsr && copy-regions-file-to-scratch && get-abs-ref-dirs"
          # - name: mutect2-vcf-bgzip-and-index
          #   templateRef:
          #     name: bcftools-template
          #     template: bcftools-bgzip-and-index
          #   arguments:
          #     parameters:
          #       - name: input-vcf-f
          #         value: "{{tasks.parabricks-somatic-pipeline.outputs.parameters.output-tumor-vcf}}"
          #   depends: "parabricks-somatic-pipeline"
          - name: mutect2-filter
            templateRef:
              name: mutect2-template
              template: mutect2-mark-calls
            arguments:
              parameters:
                - name: input-unfiltered-vcf
                  value: "{{tasks.pb-mutect2.outputs.parameters.output-vcf}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-marked-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_marked.vcf.gz"
            depends: "get-abs-ref-dirs && copy-regions-file-to-scratch && pb-mutect2"
          - name: bcftools-filter
            templateRef:
              name: bcftools-template
              template: bcftools-filter-and-bed
            arguments:
              parameters:
                - name: do-filter
                  value: ""
                - name: input-vcf-f
                  value: "{{tasks.mutect2-filter.outputs.parameters.output-marked-vcf}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}/results/snv/vcf/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_filtered.vcf.gz"
                - name: regions-file
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "mutect2-filter && copy-regions-file-to-scratch"
          - name: vlod
            templateRef:
              name: vlod-template
              template: vlod
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: input-vcf
                  value: "{{tasks.bcftools-filter.outputs.parameters.output-vcf-f}}"
                - name: vlod-out-tsv
                  value: "{{inputs.parameters.scratch-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_vlod.tsv.gz"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "bcftools-filter && pb-applybqsr"
          - name: vlod-merge-with-vcf
            templateRef:
              name: vlod-template
              template: vlod-merge-with-vcf
            arguments:
              parameters:
                - name: input-vcf
                  value: "{{tasks.bcftools-filter.outputs.parameters.output-vcf-f}}"
                - name: input-vlod-tsv
                  value: "{{tasks.vlod.outputs.parameters.vlod-out-tsv}}"
                - name: vlod-merged-output-vcf
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_mutect2_vlod.vcf" # output returns .gz
            depends: "bcftools-filter && vlod"
          - name: annovar
            templateRef:
              name: annovar-template
              template: annovar
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-vcf-f
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: ref-version
                  value: "hg38"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/"
                - name: annovardb-dir
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.annovar-dir}}"
            depends: "vlod-merge-with-vcf && get-abs-ref-dirs"
          - name: cancervar
            templateRef:
              name: cancervar-template
              template: cancervar
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-vcf-f
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/"
                - name: annovardb-dir
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.annovar-dir}}"
            depends: "annovar && get-abs-ref-dirs"
          - name: annovar-to-maf
            templateRef:
              name: annovar-to-maf-template
              template: annovar-to-maf
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: annovar-out-f
                  value: "{{tasks.annovar.outputs.parameters.annovar-out-f}}"
            depends: "annovar"
          - name: maf-to-db
            templateRef:
              name: maf-to-db-template
              template: maf-to-db
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].id')}}"
                - name: input-maf
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: batch-size
                  value: "1000"
            depends: "annovar-to-maf"
          - name: oncokb-snv
            templateRef:
              name: oncokb-templates
              template: oncokb-snv
            arguments:
              parameters:
                - name: annovar-maf-f
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: annovar-oncokb-maf-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_oncokb.maf"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
            depends: "annovar-to-maf"
          - name: get-otherinfo-columns
            templateRef:
              name: duckdb-template
              template: determine-otherinfo-column
            arguments:
              parameters:
                - name: annovar-oncokb-maf
                  value: "{{tasks.oncokb-snv.outputs.parameters.annovar-oncokb-maf-f}}"
            depends: "oncokb-snv"
          - name: duckdb-snv
            templateRef:
              name: duckdb-template
              template: duckdb-snv
            arguments:
              parameters:
                - name: annovar-oncokb-maf
                  value: "{{tasks.oncokb-snv.outputs.parameters.annovar-oncokb-maf-f}}"
                - name: cancervar-tsv
                  value: "{{tasks.cancervar.outputs.parameters.cancervar-out-f}}"
                - name: vlod-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.vlod-column-name}}"
                - name: filter-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.filter-column-name}}"
                - name: sample-column-name
                  value: "{{tasks.get-otherinfo-columns.outputs.parameters.sample-column-name}}"
                - name: output-duckdb
                  value: "{{inputs.parameters.temp-rel-dir}}results/db/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_results.duckdb"
            depends: "oncokb-snv && cancervar && get-otherinfo-columns"
          - name: manta
            templateRef:
              name: manta-template
              template: manta
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: tumor-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-sv-merged}}"
                  # value: ""
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.canonical-chroms-regions}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/"
                - name: scratch-dir
                  value: "{{inputs.parameters.scratch-rel-dir}}manta/"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "pb-applybqsr && get-abs-ref-dirs && copy-regions-file-to-scratch && bgzip-and-index-regions-file"
          - name: bcftools-filter-and-bed
            templateRef:
              name: bcftools-template
              template: bcftools-filter-and-bed
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.manta.outputs.parameters.output-tumor-vcf-f}}"
                - name: output-vcf-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV.vcf.gz"
                - name: regions-file
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-sv-merged}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
                - name: do-filter
                  value: ""
            depends: "manta && copy-regions-file-to-scratch"
          - name: annotsv
            templateRef:
              name: annotsv-template
              template: annotsv
            arguments:
              parameters:
                - name: input-vcf-f
                  value: "{{tasks.bcftools-filter-and-bed.outputs.parameters.output-vcf-f}}"
                - name: annotsv-ref-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/AnnotSV/"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: sv-min-size
                  value: "20"
                - name: output-annotsv-tsv-f
                  value: "{{inputs.parameters.scratch-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_annot.tsv"
            depends: "bcftools-filter-and-bed"
          - name: annotsv-create-dummy-tsv
            templateRef:
              name: annotsv-template
              template: annotsv-create-dummy-tsv
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: dummy-annotsv-tsv-f
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
            depends: "annotsv"
          - name: annotsv-to-oncokb-format
            templateRef:
              name: filter-annotsv-template
              template: annotsv-to-oncokb-format
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: annotsv-tsv
                  value: "{{tasks.annotsv.outputs.parameters.output-annotsv-tsv-f}}"
                - name: annotsv-filtered-out-tsv
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_annot_filtered.tsv"
                - name: annotsv-oncokb-out-tsv
                  value: "{{inputs.parameters.scratch-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_oncokb.tsv"
            depends: "annotsv && get-abs-ref-dirs"
          - name: oncokb-sv
            templateRef:
              name: oncokb-templates
              template: oncokb-sv
            arguments:
              parameters:
                - name: oncokb-sv-in-f
                  value: "{{tasks.annotsv-to-oncokb-format.outputs.parameters.annotsv-oncokb-out-tsv}}"
                - name: oncokb-sv-out-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/sv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_SV_oncokb_annot.tsv"
            depends: "annotsv-to-oncokb-format"
          - name: duckdb-sv
            templateRef:
              name: duckdb-template
              template: duckdb-sv
            arguments:
              parameters:
                - name: oncokb-tsv-f
                  value: "{{tasks.oncokb-sv.outputs.parameters.oncokb-sv-out-f}}"
                - name: annotsv-tsv-f
                  value: "{{tasks.annotsv-to-oncokb-format.outputs.parameters.annotsv-filtered-out-tsv}}"
                - name: output-duckdb
                  value: "{{inputs.parameters.temp-rel-dir}}results/db/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}_results.duckdb"
            depends: "oncokb-sv"
          - name: cnvpytor
            templateRef:
              name: cnvpytor-template
              template: cnvpytor
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: input-vcf
                  value: "{{tasks.vlod-merge-with-vcf.outputs.parameters.vlod-merged-output-vcf}}"
                - name: ref-genome-f
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.ref-genome-f}}"
                - name: output-f
                  value: "{{inputs.parameters.temp-rel-dir}}results/cnv/{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}.cnvpytor"
                - name: thread-count
                  value: "{{inputs.parameters.thread-count}}"
            depends: "pb-applybqsr && vlod-merge-with-vcf && get-abs-ref-dirs"
          - name: verifybamid
            templateRef:
              name: verifybamid-template
              template: verifybamid-exome-wrapper
            arguments:
              parameters:
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/verifybamid/"
                - name: ref-version
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}"
                - name: verifybamid-ref-base-dir
                  value: "{{inputs.parameters.ref-base-dir}}{{=jsonpath(inputs.parameters['run-data'], '$.refVersion')}}/other/verifybamid/"
            depends: "pb-applybqsr"
          - name: mosdepth
            templateRef:
              name: mosdepth-template
              template: mosdepth-exome
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: thresholds
                  value: "1,5,10,30,50,100,500"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/mosdepth/"
                - name: regions-bed-f
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-snv}}"
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-all-tracks}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "pb-applybqsr && get-abs-ref-dirs && verifybamid && copy-regions-file-to-scratch"
          - name: msisensor-pro
            templateRef:
              name: msisensor-pro-template
              template: msisensor-pro
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: input-bam
                  value: "{{tasks.pb-applybqsr.outputs.parameters.output-bam}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}results/snv/msisensor/"
                - name: tcga-baseline
                  value: "{{tasks.get-abs-ref-dirs.outputs.parameters.msisensor-pro-baseline}}"
            depends: "pb-applybqsr && get-abs-ref-dirs"
          - name: collect-somatic-data
            # collects TMB and MSI information
            templateRef:
              name: collect-somatic-data-templates
              template: collect-somatic-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: maf-in-f
                  value: "{{tasks.annovar-to-maf.outputs.parameters.annovar-maf-f}}"
                - name: msisensorpro-in-f
                  value: "{{tasks.msisensor-pro.outputs.parameters.output-tsv}}"
                - name: snv-regions-bed-f
                  # value: "{{tasks.get-abs-ref-dirs.outputs.parameters.somtest-A3416642-regions-snv}}"
                  value: "{{tasks.copy-regions-file-to-scratch.outputs.parameters.regions-file}}"
            depends: "annovar-to-maf && msisensor-pro && copy-regions-file-to-scratch"
          - name: multiqc
            templateRef:
              name: multiqc-template
              template: main
            arguments:
              parameters:
                - name: input-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
                - name: output-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "verifybamid && pb-applybqsr && mosdepth"
          - name: collect-qc-data
            templateRef:
              name: collect-qc-data-templates
              template: collect-qc-data
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: run-id
                  value: "{{inputs.parameters.run-id}}"
                - name: sample-fqs-fnames
                  # value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                  value: '["{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR1.name'')}}", "{{=jsonpath(inputs.parameters[''run-data''], ''$.samples[0].files.fqR2.name'')}}"]'
                - name: metrics-dir
                  value: "{{inputs.parameters.temp-rel-dir}}metrics/"
            depends: "multiqc && mosdepth && verifybamid"
          - name: copy-temp-to-output
            templateRef:
              name: copy-temp-to-output
              template: copy-temp-to-output
            arguments:
              parameters:
                - name: sample-id
                  value: "{{=jsonpath(inputs.parameters['run-data'], '$.samples[0].sampleId')}}"
                - name: output-rel-dir
                  value: "{{inputs.parameters.output-rel-dir}}"
                - name: temp-rel-dir
                  value: "{{inputs.parameters.temp-rel-dir}}"
            depends: "collect-qc-data && maf-to-db && collect-somatic-data && duckdb-sv && duckdb-snv && cnvpytor"
          - name: clean-scratch
            templateRef:
              name: dir-clean-up
              template: dir-clean-up
            arguments:
              parameters:
                - name: directory
                  value: "{{inputs.parameters.scratch-rel-dir}}"
            # depends: "copy-temp-to-output"
            depends: "collect-qc-data && verifybamid && mosdepth && duckdb-sv && duckdb-snv"

    # - name: somatic-testing-dna-gpu-vcf
